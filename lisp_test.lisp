(assert= 0 (+))
(assert= 4 (+ 4))
(assert= 6 (+ 4 2))
(assert= 7 (+ 4 2 1))
(assert= 13 (+ 6 4 2 1))
(assert= -1 (- 1))
(assert= 2 (- 4 2))
(assert= 0 (- 4 2 2))
(assert= 1 (*))
(assert= 4 (* 4))
(assert= 8 (* 4 2))
(assert= 24 (* 4 2 3))
(assert= 0.5 (/ 2))
(assert= 4 (/ 24 6))
(assert= 2 (/ 24 6 2))
(assert (= 1 1))
(refute (= 1 0))
(assert (= "a" "a"))
(refute (= "a" "b"))
(assert (= nil nil))
(refute (= nil 1))
(assert (nil? nil))
(refute (nil? 1))
(assert= 0 (length nil))
(assert= 0 (length (list)))
(assert= 1 (length (cons 1 nil)))
(assert= 2 (length (cons 1 (cons 2 nil))))
(assert= 2 (length (list 1 2)))
(assert= "hello world" (str "hello" " " "world"))
(assert= (list 1 3 5) (filter odd? (list 1 2 3 4 5)))
(assert= 6 (reduce + 0 (list 1 2 3)))
(assert (and))
(assert (and true))
(refute (and false))
(assert= nil (and nil))
(assert= 1 (and 1))
(assert (and true true))
(refute (and false true))
(refute (and true false))
(refute (and false false))
(assert= 1 (and true true 1))
(assert= nil (and nil true))
(refute (or))
(assert (or true))
(assert= 1 (or 1))
(refute (or false))
(assert= nil (or nil))
(assert (or true true))
(assert (or false true))
(assert (or true false))
(refute (or false false))
(assert (or true true 1))
(assert (or nil true))
(assert= '(2 4 6) (map (fn [x] (* x 2)) '(1 2 3)))
(assert= '((0 "a") (1 "b") (2 "c")) (map-indexed list '("a" "b" "c")))
(assert= 1 (first '(1 2 3)))
(assert= '(2 3) (rest '(1 2 3)))
(assert= 3 (last '(1 2 3)))
(assert= 2 (nth '(1 2 3) 1))
(assert= 0 (let () 0))
(assert= 1 (let (a 1) a))
(assert= 2 (let (a 1 b 2) b))
(assert= 0 (letrec () 0))
(assert= 1 (letrec (a 1) a))
(assert= 2 (letrec (a 1 b (+ a 1)) b))
(assert= 4 (letrec (a 1 b (+ a 1) c (* b 2)) c))
(assert= nil (cond))
(assert= 1 (cond true 1))
(assert= 2 (cond false 1 true 2))
(assert= 3 (cond false 1 nil 2 "truthy" 3))
(assert= 4 (cond false 1 nil 2 false 3 :else 4))
(assert= 1 (cond true 1 nil 2 false 3 :else 4))
(assert= 2 (cond false 1 2 2 false 3 :else 4))
(assert= '(1 2 3) (range 1 4))
(assert= 3 (eval '(+ 1 2)))

(println (str "\n\n" "finished"))
