(assert= 0 (+) nil)
(assert= 4 (+ 4) nil)
(assert= 6 (+ 4 2) nil)
(assert= 7 (+ 4 2 1) nil)
(assert= 13 (+ 6 4 2 1) nil)
(assert= -1 (- 1) nil)
(assert= 2 (- 4 2) nil)
(assert= 0 (- 4 2 2) nil)
(assert= 1 (*) nil)
(assert= 4 (* 4) nil)
(assert= 8 (* 4 2) nil)
(assert= 24 (* 4 2 3) nil)
(assert= 0.5 (/ 2) nil)
(assert= 4 (/ 24 6) nil)
(assert= 2 (/ 24 6 2) nil)
(assert= true (= 1 1) nil)
(assert= false (= 1 0) nil)
(assert= true (= "a" "a") nil)
(assert= false (= "a" "b") nil)
(assert= true (= nil nil) nil)
(assert= false (= nil 1) nil)
(assert= true (nil? nil) nil)
(assert= false (nil? 1) nil)
(assert= 0 (length nil) nil)
(assert= 0 (length (list)) nil)
(assert= 1 (length (cons 1 nil)) nil)
(assert= 2 (length (cons 1 (cons 2 nil))) nil)
(assert= 2 (length (list 1 2)) nil)
(assert= "hello world" (str "hello" " " "world") nil)
(assert= (list 1 3 5) (filter odd? (list 1 2 3 4 5)) nil)
(assert= 6 (reduce + 0 (list 1 2 3)) nil)
(assert= true (and) nil)
(assert= true (and true) nil)
(assert= false (and false) nil)
(assert= nil (and nil) nil)
(assert= 1 (and 1) nil)
(assert= true (and true true) nil)
(assert= false (and false true) nil)
(assert= false (and true false) nil)
(assert= false (and false false) nil)
(assert= 1 (and true true 1) nil)
(assert= nil (and nil true) nil)
(assert= false (or) nil)
(assert= true (or true) nil)
(assert= 1 (or 1) nil)
(assert= false (or false) nil)
(assert= nil (or nil) nil)
(assert= true (or true true) nil)
(assert= true (or false true) nil)
(assert= true (or true false) nil)
(assert= false (or false false) nil)
(assert= true (or true true 1) nil)
(assert= true (or nil true) nil)
(assert= '(2 4 6) (map (fn [x] (* x 2)) '(1 2 3)) nil)
(assert= '((0 "a") (1 "b") (2 "c")) (map-indexed list '("a" "b" "c")) nil)
(assert= 1 (first '(1 2 3)), nil)
(assert= '(2 3) (rest '(1 2 3)), nil)
(assert= 3 (last '(1 2 3)) nil)
(assert= 2 (nth '(1 2 3) 1) nil)
(assert= 0 (let () 0) nil)
(assert= 1 (let (a 1) a) nil)
(assert= 2 (let (a 1 b 2) b) nil)
(assert= 0 (letrec () 0) nil)
(assert= 1 (letrec (a 1) a) nil)
(assert= 2 (letrec (a 1 b (+ a 1)) b) nil)
(assert= 4 (letrec (a 1 b (+ a 1) c (* b 2)) c) nil)

(println (str "\n\n" "finished"))
