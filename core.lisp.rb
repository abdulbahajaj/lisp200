[
  [:def, :"=", [:fn, [:a, :b], [:".", :a, :==, :b]]],
  [:def, :nil?, [:fn, [:a], [:".", :a, :nil?]]],
  [:def, :throw, [:fn, [:a], [:raise, :a]]],
  [:def, :length, [:fn, [:a], [:if, :a, [:".", :a, :length], 0]]],
  [:def, :empty?, [:fn, [:a], [:"=", 0, [:length, :a]]]],
  [:def, :first, [:fn, [:a], [:if, :a, [:".", :a, 'first'], nil]]],
  [:def, :rest, [:fn, [:a], [:if, :a, [:if, [:"=", [:length, :a], 1], nil, [:".", :a, :[], 1..-1], nil]]]],
  [:def, :last, [:fn, [:a], [:if, :a, [:".", :a, 'last'], nil]]],

  [:def, :*, [:fn, [:&, :args],
              [
                [:fn, [:r], [:if, :r, :r, 1]],
                [:".", :args, :inject,
                 [:block, [:fn, [:t, :n], [:".", :t, :*, :n]]]]]]],
  [:def, :/, [:fn, [:&, :args],
              [:if, [:"=", 1, [:length, :args]],
               [:".", 1, :/, [:".", [:first, :args], :to_f]],
               [:".", :args, :inject,
                [:block, [:fn, [:t, :n], [:".", :t, :/, [:".", :n, :to_f]]]]]]]],
  [:def, :+, [:fn, [:&, :args],
              [:".",
               [:".", :args, :inject,
                [:block, [:fn, [:t, :n], [:".", :t, :+, :n]]]],
               :to_i]]],
  [:def, :-, [:fn, [:&, :args],
              [:if, [:"=", 1, [:length, :args]],
               [:*, -1, [:first, :args]],
               [:".",
                [:".", :args, :inject,
                 [:block, [:fn, [:t, :n], [:".", :t, :-, :n]]]],
                :to_i]]]],

  [:def, :print, [:fn, [:a], [:".", :Object, 'print', [:".", :a, :to_s]]]],
  [:def, :println, [:fn, [:a], [:print, :a], [:print, "\n"]]],
  [:defmacro, :not, [:fn, [:a], [:if, :a, false, true]]],
  [:defmacro, :unless, [:fn, [:pred, :t, :f], [:quasiquote, [:if, [:unquote, :pred], [:unquote, :f], [:unquote, :t]]]]],
  [:def, :str, [:fn, [:&, :args],
         [:if, [:empty?, :args],
               "",
               [:".",
                [:".", [:first, :args], :to_s],
                :+,
                [:apply, :str, [:rest, :args]]]]]],
  [:def, :even?, [:fn, [:a], [:".", :a, 'even?']]],
  [:def, :odd?, [:fn, [:a], [:".", :a, 'odd?']]],
  [:def, :filter, [:fn, [:pred, :a],
         [:if, [:empty?, :a],
               nil,
               [:if, [:pred, [:first, :a]],
                [:cons, [:first, :a], [:filter, :pred, [:rest, :a]]],
                [:filter, :pred, [:rest, :a]]]]]],

  #[:defmacro, :let, [:fn, [:binds, :&, :body],
         #[:define, :odds, 
         #[:if, [:empty?, :binds],
          #[:quasiquote, [:do, [:splice_unquote, :body]]],

#]]],

  [:defmacro, :assert, [:fn, [:pred, :message],
         [:quasiquote, [:if, [:unquote, :pred],
                             [:print, "."],
                             [:println,
                              [:str,
                               "assertion failure: ",
                               [:if, [:unquote, :message],
                                [:unquote, :message],
                                [:str, "Expected ", [:".", [:unquote, :pred], :inspect], " to be truthy"]]]]]]]],
  [:defmacro, :assert=, [:fn, [:expected, :actual, :message],
         [:quasiquote, [:if, [:"=", [:unquote, :expected], [:unquote, :actual]],
                             [:print, "."],
                             [:println,
                              [:str,
                               "assertion failure: ",
                               [:if, [:unquote, :message],
                                [:unquote, :message],
                                [:str, "Expected ", [:".", [:unquote, :expected], :inspect], ", but got ", [:".", [:unquote, :actual], :inspect]]]]]]]]],
]
